@page "/diagrams"
@using Blazor_DIp.Components
@using Blazor_DIp.design

<div style="width:90vw; height: 90vh">
    <div class = "func_menu">
        <button class = "func_btn" @onclick ="CreateNode">Создать узел</button>
        <button class = "func_btn" @onclick = "CreateGroup" >Создать группу</button>
        <button class = "func_btn" @onclick = "CreatePort">Добавить порт</button>
    </div>
   
  <CascadingValue Value="Diagram">
    <DiagramCanvas>
        <Widgets>
            <NavigatorWidget Width="300" Height="200" DefaultStyle="true"></NavigatorWidget>
        </Widgets>
    </DiagramCanvas>
</CascadingValue>

</div>


@code {
    private Diagram Diagram { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var options = new DiagramOptions
    {
      DeleteKey = "Delete", // What key deletes the selected nodes/links
      DefaultNodeComponent = null, // Default component for nodes
      AllowMultiSelection = true, // Whether to allow multi selection using CTRL
      Links = new DiagramLinkOptions
      {
      },
      Zoom = new DiagramZoomOptions
      {
        Minimum = 0.5, // Minimum zoom value
        Inverse = true, // Whether to inverse the direction of the zoom when using the wheel
      }
    };
        Diagram = new Diagram(options);
        Diagram.RegisterModelComponent<CustomModels,Standart>();
       
    }

    private static CustomModels NewNode(double x, double y)
    {
        var node = new CustomModels(new Point(x, y));
        node.AddPort(PortAlignment.Bottom);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Left);
        node.AddPort(PortAlignment.Right);
        return node;
    }

    private void CreateNode()
    {
        var node = NewNode(50, 50);
        Diagram.Nodes.Add(new [] { node });
    }

    private void CreateGroup()
    {
        var selectedNodes = Diagram.Nodes.Where(n => n.Selected).ToArray();
        //Diagram.AddGroup(new CustomGroupD(new[] { node2, node3 }));
    }

    private void CreatePort()
    {
        var node = Diagram.Nodes.FirstOrDefault(n => n.Selected);
            if (node == null)
                return;

            foreach(PortAlignment portAlignment in Enum.GetValues(typeof(PortAlignment)))
            {
                if(node.GetPort(portAlignment) == null)
                {
                    node.AddPort(portAlignment);
                    node.Refresh();
                    break;
                }
            }  
    }
}